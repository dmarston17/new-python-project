from sqlmodel import SQLModel, Field, create_engine, Session, select
from typing import Optional, List
from pathlib import Path

# Define a simple Item model stored in SQLite. id is optional because it's
# automatically generated by the database when we insert a new row.
class Item(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    key: str
    value: str


# Use a file-based SQLite database inside the project for simplicity.
DB_FILE = Path(__file__).resolve().parent.parent / "data.db"
DATABASE_URL = f"sqlite:///{DB_FILE}"


def get_engine():
    return create_engine(DATABASE_URL, echo=False)


def init_db():
    engine = get_engine()
    SQLModel.metadata.create_all(engine)


def list_items() -> List[Item]:
    engine = get_engine()
    with Session(engine) as session:
        return session.exec(select(Item)).all()


def get_item_by_key(key: str) -> Optional[Item]:
    engine = get_engine()
    with Session(engine) as session:
        statement = select(Item).where(Item.key == key)
        return session.exec(statement).first()


def upsert_item(key: str, value: str) -> Item:
    engine = get_engine()
    with Session(engine) as session:
        existing = session.exec(select(Item).where(Item.key == key)).first()
        if existing:
            existing.value = value
            session.add(existing)
            session.commit()
            session.refresh(existing)
            return existing
        item = Item(key=key, value=value)
        session.add(item)
        session.commit()
        session.refresh(item)
        return item


def delete_item_by_key(key: str) -> None:
    engine = get_engine()
    with Session(engine) as session:
        existing = session.exec(select(Item).where(Item.key == key)).first()
        if existing:
            session.delete(existing)
            session.commit()
